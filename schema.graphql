type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}
type NapEdge {
  cursor: String!
  node: Nap
}
type NapConnection {
  edges: [NapEdge]
  pageInfo: PageInfo!
}

type Nap {
  id: ID!
  start: Time!
  end: Time!
  icon: String
  status: String
  dnd: Boolean
  accounts: [Account!]!
}

type NapPayload {
  status: Boolean
  errors: String
  nap: Nap
}

input NapInput {
  start: Time
  end: Time
  icon: String
  status: String
  dnd: Boolean
}

type Account {
  # this is the slack workspace
  name: String!
  email: Email!
  provider: String!
}

type Email {
  value: String
  verified: Boolean
}

type User {
  id: ID!
  primaryEmail: Email
  emails: [Email]
  name: String
  naps: NapConnection
}

type Query {
  me: User
}

# type Mutation {
#   napCreate(input: NapInput): NapPayload
#   napDelete(id: ID!): NapPayload
# }

schema {
  query: Query
  #   mutation: Mutation
}
